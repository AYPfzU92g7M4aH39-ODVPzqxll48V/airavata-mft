syntax = "proto3";

option java_multiple_files = true;
package org.apache.airavata.mft.api.service;

import "CredCommon.proto";
import "MFTAgentStubs.proto";

message CallbackEndpoint {
    enum CallbackType {
        HTTP = 0;
        KAFKA = 1;
    }
    CallbackType type = 1;
    string endpoint = 2;
}

message EndpointPaths {
    string sourcePath = 1;
    string destinationPath = 2;
}

message TransferApiRequest {
    repeated EndpointPaths endpointPaths = 1;
    string sourceStorageId = 2;
    string sourceSecretId = 3;
    string destinationStorageId = 5;
    string destinationSecretId = 6;
    bool optimizeTransferPath = 7;
    map<string, int32> targetAgents = 8;
    org.apache.airavata.mft.common.AuthToken mftAuthorizationToken = 9;
    repeated CallbackEndpoint callbackEndpoints = 10;
}

message TransferApiResponse {
    string transferId = 1;
}

message HttpUploadApiRequest {
    string destinationStorageId = 1;
    string resourcePath = 2;
    string destinationSecretId = 3;
    string targetAgent = 5;
    org.apache.airavata.mft.common.AuthToken mftAuthorizationToken = 6;
}

message HttpUploadApiResponse {
    string url = 1;
    string targetAgent = 2;
}

message HttpDownloadApiRequest {
    string resourcePath = 1;
    string sourceStorageId = 2;
    string sourceSecretId = 3;
    string targetAgent = 5;
    org.apache.airavata.mft.common.AuthToken mftAuthorizationToken = 6;
}

message HttpDownloadApiResponse {
    string url = 1;
    string targetAgent = 2;
}

message TransferStateApiRequest {
    string transferId = 1;
    org.apache.airavata.mft.common.AuthToken mftAuthorizationToken = 2;
}

message TransferStateResponse {
    string state = 1;
    int64 updateTimeMils = 2;
    double percentage = 3;
    string description = 4;
}

message TransferStateSummaryResponse {
    string state = 1;
    int64 updateTimeMils = 2;
    double percentage = 3;
    repeated string completed = 4;
    repeated string failed = 5;
    repeated string processing = 6;
    string description = 7;
}

message ResourceAvailabilityResponse {
    bool available = 1;
}

message GetResourceMetadataFromIDsRequest {
    string resourcePath = 1;
    string storageId = 2;
    string secretId = 3;
    bool recursiveSearch = 4;
}

message FetchResourceMetadataRequest {
    oneof request {
        org.apache.airavata.mft.agent.stub.GetResourceMetadataRequest directRequest = 1;
        GetResourceMetadataFromIDsRequest idRequest = 2;
    }
    org.apache.airavata.mft.common.AuthToken mftAuthorizationToken = 3;
}

service  MFTTransferService {

    rpc submitTransfer(TransferApiRequest) returns (TransferApiResponse);

    rpc submitHttpUpload(HttpUploadApiRequest) returns (HttpUploadApiResponse);

    rpc submitHttpDownload(HttpDownloadApiRequest) returns (HttpDownloadApiResponse);

    rpc getAllTransferStates(TransferStateApiRequest) returns (stream TransferStateResponse);

    rpc getTransferStateSummary(TransferStateApiRequest) returns (TransferStateSummaryResponse);

    rpc getResourceAvailability(FetchResourceMetadataRequest) returns (ResourceAvailabilityResponse);

    rpc resourceMetadata(FetchResourceMetadataRequest) returns (org.apache.airavata.mft.agent.stub.ResourceMetadata);

}